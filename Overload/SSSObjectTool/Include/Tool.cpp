
// Tool.cpp : 응용 프로그램에 대한 클래스 동작을 정의합니다.
//

#include "stdafx.h"
#include "afxwinappex.h"
#include "afxdialogex.h"
#include "Tool.h"
#include "MainFrm.h"

#include "ToolDoc.h"
#include "ToolView.h"
#include "Core.h"

#include "EditorArchive.h"
#include "SceneManager.h"
#include "Transform.h"
#include "Layer.h"
#include "CollisionManager.h"
#include "PathManager.h"

SSS_USING

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// CToolApp

BEGIN_MESSAGE_MAP(CToolApp, CWinAppEx)
	ON_COMMAND(ID_APP_ABOUT, &CToolApp::OnAppAbout)
	// 표준 파일을 기초로 하는 문서 명령입니다.
	ON_COMMAND(ID_FILE_NEW, &CWinAppEx::OnFileNew)
	ON_COMMAND(ID_FILE_OPEN, &CWinAppEx::OnFileOpen)
	// 표준 인쇄 설정 명령입니다.
	ON_COMMAND(ID_FILE_PRINT_SETUP, &CWinAppEx::OnFilePrintSetup)
	ON_COMMAND(ID_CREATE_OBJECT, &CToolApp::OnCreateObject)
	ON_COMMAND(ID_CREATE_UI, &CToolApp::OnCreateUI)
	
	//ON_COMMAND(ID_TEXTURELOAD_BASE, &CToolApp::LoadBaseTexture)
	//ON_COMMAND(ID_TEXTURELOAD_SUB, &CToolApp::LoadSubTexture)
	ON_COMMAND(ID_32779, &CToolApp::OnAnimationDlg)
	ON_COMMAND(ID_32780, &CToolApp::SceneSave)
	ON_COMMAND(ID_32781, &CToolApp::SceneLoad)
	ON_COMMAND(ID_32786, &CToolApp::SavePrefab)
	ON_COMMAND(ID_32787, &CToolApp::LoadPrefab)
	//ON_COMMAND(ID_SCENE_GAMEMODE, &CToolApp::OnSceneGamemode)
	ON_COMMAND(ID_32788, &CToolApp::EditLayer)
END_MESSAGE_MAP()


// CToolApp 생성

CToolApp::CToolApp()
{
	// 다시 시작 관리자 지원
	m_dwRestartManagerSupportFlags = AFX_RESTART_MANAGER_SUPPORT_ALL_ASPECTS;
#ifdef _MANAGED
	// 응용 프로그램을 공용 언어 런타임 지원을 사용하여 빌드한 경우(/clr):
	//     1) 이 추가 설정은 다시 시작 관리자 지원이 제대로 작동하는 데 필요합니다.
	//     2) 프로젝트에서 빌드하려면 System.Windows.Forms에 대한 참조를 추가해야 합니다.
	System::Windows::Forms::Application::SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode::ThrowException);
#endif

	// TODO: 아래 응용 프로그램 ID 문자열을 고유 ID 문자열로 바꾸십시오(권장).
	// 문자열에 대한 서식: CompanyName.ProductName.SubProduct.VersionInformation
	SetAppID(_T("Tool.AppID.NoVersion"));

	// TODO: 여기에 생성 코드를 추가합니다.
	// InitInstance에 모든 중요한 초기화 작업을 배치합니다.
}

// 유일한 CToolApp 개체입니다.

CToolApp theApp;


// CToolApp 초기화

BOOL CToolApp::InitInstance()
{
	// 응용 프로그램 매니페스트가 ComCtl32.dll 버전 6 이상을 사용하여 비주얼 스타일을
	// 사용하도록 지정하는 경우, Windows XP 상에서 반드시 InitCommonControlsEx()가 필요합니다. 
	// InitCommonControlsEx()를 사용하지 않으면 창을 만들 수 없습니다.
	INITCOMMONCONTROLSEX InitCtrls;
	InitCtrls.dwSize = sizeof(InitCtrls);
	// 응용 프로그램에서 사용할 모든 공용 컨트롤 클래스를 포함하도록
	// 이 항목을 설정하십시오.
	InitCtrls.dwICC = ICC_WIN95_CLASSES;
	InitCommonControlsEx(&InitCtrls);

	CWinAppEx::InitInstance();


	// OLE 라이브러리를 초기화합니다.
	if (!AfxOleInit())
	{
		AfxMessageBox(IDP_OLE_INIT_FAILED);
		return FALSE;
	}

	AfxEnableControlContainer();

	EnableTaskbarInteraction(FALSE);

	// RichEdit 컨트롤을 사용하려면  AfxInitRichEdit2()가 있어야 합니다.	
	// AfxInitRichEdit2();

	// 표준 초기화
	// 이들 기능을 사용하지 않고 최종 실행 파일의 크기를 줄이려면
	// 아래에서 필요 없는 특정 초기화
	// 루틴을 제거해야 합니다.
	// 해당 설정이 저장된 레지스트리 키를 변경하십시오.
	// TODO: 이 문자열을 회사 또는 조직의 이름과 같은
	// 적절한 내용으로 수정해야 합니다.
	SetRegistryKey(_T("로컬 응용 프로그램 마법사에서 생성된 응용 프로그램"));
	LoadStdProfileSettings(4);  // MRU를 포함하여 표준 INI 파일 옵션을 로드합니다.


	// 응용 프로그램의 문서 템플릿을 등록합니다.  문서 템플릿은
	//  문서, 프레임 창 및 뷰 사이의 연결 역할을 합니다.
	CSingleDocTemplate* pDocTemplate;
	pDocTemplate = new CSingleDocTemplate(
		IDR_MAINFRAME,
		RUNTIME_CLASS(CToolDoc),
		RUNTIME_CLASS(CMainFrame),       // 주 SDI 프레임 창입니다.
		RUNTIME_CLASS(CToolView));
	if (!pDocTemplate)
		return FALSE;
	AddDocTemplate(pDocTemplate);


	// 표준 셸 명령, DDE, 파일 열기에 대한 명령줄을 구문 분석합니다.
	CCommandLineInfo cmdInfo;
	ParseCommandLine(cmdInfo);



	// 명령줄에 지정된 명령을 디스패치합니다.
	// 응용 프로그램이 /RegServer, /Register, /Unregserver 또는 /Unregister로 시작된 경우 FALSE를 반환합니다.
	if (!ProcessShellCommand(cmdInfo))
		return FALSE;

	// 창 하나만 초기화되었으므로 이를 표시하고 업데이트합니다.
	m_pMainWnd->ShowWindow(SW_SHOW);
	m_pMainWnd->UpdateWindow();


	return TRUE;
}

int CToolApp::ExitInstance()
{
	//TODO: 추가한 추가 리소스를 처리합니다.
	AfxOleTerm(FALSE);

	return CWinAppEx::ExitInstance();
}

// CToolApp 메시지 처리기


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
public:
	virtual BOOL PreTranslateMessage(MSG* pMsg);
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()

// 대화 상자를 실행하기 위한 응용 프로그램 명령입니다.
void CToolApp::OnAppAbout()
{
	CAboutDlg aboutDlg;
	aboutDlg.DoModal();
}

BOOL CToolApp::OnIdle(LONG lCount)
{	
	if (m_pMainWnd->IsIconic())
	{		
		return FALSE;
	}

	else
	{		
		//CWnd *pWnd = AfxGetMainWnd();
		//HWND CurrenthWnd = pWnd->m_hWnd;

		//HINSTANCE	CurInstance = AfxGetInstanceHandle();//m_hInstance;
		
		//if (CurrenthWnd == m_pMainWnd->m_hWnd)
		//if(CurInstance == m_hInstance)
		if(!GET_SINGLE(CEditorArchive)->GetAnimationDlgState())
		{
			GET_SINGLE(CCore)->Logic();
			if(GET_SINGLE(CEditorArchive)->GetTransformState())
				GET_SINGLE(CEditorArchive)->GetInspector()->CheckTransform();
			if (GET_SINGLE(CSceneManager)->GetSceneState() == SS_PLAY)
			{
				CScene*	pScene = GET_SINGLE(CSceneManager)->GetCurrentScene();
				if (pScene->IsInitialized())
				{
					GET_SINGLE(CEditorArchive)->GetHierarchy()->SetSceneStartObject();
				}
				SAFE_RELEASE(pScene)
			}
		}
	}

	return TRUE;
}

int CToolApp::Run()
{
	return CWinApp::Run();
}



// CToolApp 메시지 처리기


// CreateObject
void CToolApp::OnCreateObject()
{
	GET_SINGLE(CEditorArchive)->GetHierarchy()->OnCreateObject();
}

void CToolApp::OnCreateUI()
{
	GET_SINGLE(CEditorArchive)->GetHierarchy()->OnCreateUI();
}



void CToolApp::OnAnimationDlg()
{
	CGameObject* pSelectedGameObject = GET_SINGLE(CEditorArchive)->GetSelectObject();
	if (pSelectedGameObject)
	{
		CAnimator* pAnimator = pSelectedGameObject->GetComponent<CAnimator>();
		CMeshRenderer* pRenderer = pSelectedGameObject->GetComponent<CMeshRenderer>();
		if (pAnimator && pRenderer)
		{
			CMesh* pMesh = pRenderer->GetMesh();
			if (pMesh)
			{
				GET_SINGLE(CEditorArchive)->CreateAnimationDlg();
			}
		}
		SAFE_RELEASE(pAnimator);
		SAFE_RELEASE(pRenderer);
	}
}


void CToolApp::SceneSave()
{
	// TODO: 여기에 명령 처리기 코드를 추가합니다.
	CFileDialog	dlg(FALSE, L"SSSScene", L"Default", OFN_HIDEREADONLY,
		L"SSSScene(*.*)|*.*|AllFiles(*.*)|*.*||");

	if (dlg.DoModal() == IDOK)
	{
		CString	strFileName = dlg.GetPathName();

		char* pRelativePath = NULL;
		char* pPathKey = NULL;
		GET_SINGLE(CPathManager)->ExtractRelativeDirectoryFromFullPath(CT2CA(strFileName), &pRelativePath, &pPathKey);
		string temp(pRelativePath);
		wstring wstrRelativePath(temp.begin(), temp.end());

		CScene*	pCurrentScene = GET_SINGLE(CSceneManager)->GetCurrentScene();
		GET_SINGLE(CSceneManager)->SaveScene(pCurrentScene, wstrRelativePath.c_str(), pPathKey);
		SAFE_RELEASE(pCurrentScene);
	}
}


void CToolApp::SceneLoad()
{
	// TODO: 여기에 명령 처리기 코드를 추가합니다.
	CFileDialog	dlg(TRUE, L"SSSScene", L"Default", OFN_HIDEREADONLY,
		L"SSSScene(*.*)|*.*|AllFiles(*.*)|*.*||");

	if (dlg.DoModal() == IDOK)
	{
		CString	strFileName = dlg.GetPathName();

		char* pRelativePath = NULL;
		char* pPathKey = NULL;
		GET_SINGLE(CPathManager)->ExtractRelativeDirectoryFromFullPath(CT2CA(strFileName), &pRelativePath, &pPathKey);
		string temp(pRelativePath);
		wstring wstrRelativePath(temp.begin(), temp.end());

		GET_SINGLE(CEditorArchive)->GetHierarchy()->ClearTreeItem();

		CScene*	pLoadScene = GET_SINGLE(CSceneManager)->CreateScene(wstrRelativePath.c_str(), pPathKey);
		if (pLoadScene)
		{
			GET_SINGLE(CEditorArchive)->RemoveGizmoControl();
			GET_SINGLE(CSceneManager)->ReleaseAllScene();
			GET_SINGLE(CSceneManager)->SetCurrentScene(pLoadScene);
			

			vector<CLayer*>*	pLoadLayers = pLoadScene->GetLayers();

			vector<CLayer*>::iterator	iter;
			vector<CLayer*>::iterator	iterEnd = pLoadLayers->end();

			for (iter = pLoadLayers->begin(); iter != iterEnd; ++iter)
			{
				list<CGameObject*>::const_iterator	Objiter;
				list<CGameObject*>::const_iterator	ObjiterEnd = (*iter)->GetAllGameObjects()->end();

				for (Objiter = (*iter)->GetAllGameObjects()->begin(); Objiter != ObjiterEnd; ++Objiter)
				{
					CTransform*	pObjTr = (*Objiter)->GetTransform();
					CTransform* pParentTr = pObjTr->GetParent();

					if (!pParentTr)
					{
						GET_SINGLE(CEditorArchive)->GetHierarchy()->LoadChildTreeItem(*Objiter);
					}

					SAFE_RELEASE(pObjTr);
				}
			}			
		}
		GET_SINGLE(CEditorArchive)->GetHierarchy()->OnInitialUpdate();
		SAFE_RELEASE(pLoadScene);
	}
}


BOOL CAboutDlg::PreTranslateMessage(MSG* pMsg)
{
	// TODO: 여기에 특수화된 코드를 추가 및/또는 기본 클래스를 호출합니다.



	return CDialogEx::PreTranslateMessage(pMsg);
}


void CToolApp::SavePrefab()
{
	GET_SINGLE(CEditorArchive)->SavePrefab();
}


void CToolApp::LoadPrefab()
{
	GET_SINGLE(CEditorArchive)->LoadPrefab();
}

void CToolApp::EditLayer()
{
	// TODO: 여기에 명령 처리기 코드를 추가합니다.
	GET_SINGLE(CEditorArchive)->CreateDlgSceneEdit();
}
